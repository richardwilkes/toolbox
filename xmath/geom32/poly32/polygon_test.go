// Copyright Â©2016-2021 by Richard A. Wilkes. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, version 2.0. If a copy of the MPL was not distributed with
// this file, You can obtain one at http://mozilla.org/MPL/2.0/.
//
// This Source Code Form is "Incompatible With Secondary Licenses", as
// defined by the Mozilla Public License, version 2.0.

package poly32_test

import (
	"math"
	"testing"
	"time"

	"github.com/richardwilkes/toolbox/xmath/geom32"
	"github.com/richardwilkes/toolbox/xmath/geom32/poly32"
	"github.com/richardwilkes/toolbox/xmath/mathf32"
	"github.com/stretchr/testify/assert"
)

func TestContains(t *testing.T) {
	p := poly32.Polygon{
		{{X: 200, Y: 20}, {X: 300, Y: 20}, {X: 300, Y: 120}, {X: 200, Y: 120}},
		{{X: 250, Y: 50}, {X: 280, Y: 50}, {X: 280, Y: 80}, {X: 250, Y: 80}},
		{{X: 260, Y: 60}, {X: 290, Y: 60}, {X: 290, Y: 90}, {X: 260, Y: 90}},
		{{X: 290, Y: 110}, {X: 320, Y: 110}, {X: 320, Y: 140}, {X: 290, Y: 140}},
	}
	assert.False(t, p.Contains(geom32.Point{X: 199, Y: 20}))
	assert.True(t, p.Contains(geom32.Point{X: 200, Y: 20}))
	assert.True(t, p.Contains(geom32.Point{X: 300, Y: 120}))
	assert.True(t, p.Contains(geom32.Point{X: 250, Y: 50}))
	assert.True(t, p.Contains(geom32.Point{X: 260, Y: 60}))
	assert.True(t, p.Contains(geom32.Point{X: 290, Y: 110}))
	assert.True(t, p.Contains(geom32.Point{X: 319, Y: 139}))
	assert.False(t, p.Contains(geom32.Point{X: 321, Y: 140}))
	assert.False(t, p.Contains(geom32.Point{X: 320, Y: 141}))

	assert.False(t, p.ContainsEvenOdd(geom32.Point{X: 199, Y: 20}))
	assert.True(t, p.ContainsEvenOdd(geom32.Point{X: 200, Y: 20}))
	assert.True(t, p.ContainsEvenOdd(geom32.Point{X: 300, Y: 120}))
	assert.False(t, p.ContainsEvenOdd(geom32.Point{X: 250, Y: 50}))
	assert.True(t, p.ContainsEvenOdd(geom32.Point{X: 260, Y: 60}))
	assert.False(t, p.ContainsEvenOdd(geom32.Point{X: 290, Y: 110}))
	assert.True(t, p.ContainsEvenOdd(geom32.Point{X: 319, Y: 139}))
	assert.False(t, p.ContainsEvenOdd(geom32.Point{X: 321, Y: 140}))
	assert.False(t, p.ContainsEvenOdd(geom32.Point{X: 320, Y: 141}))
}

func TestUnion(t *testing.T) {
	p1 := poly32.Polygon{{{X: 1, Y: 1}, {X: 1, Y: 2}, {X: 2, Y: 2}, {X: 2, Y: 1}}}
	p2 := poly32.Polygon{
		{{X: 2, Y: 1}, {X: 2, Y: 2}, {X: 3, Y: 2}, {X: 3, Y: 1}},
		{{X: 1, Y: 2}, {X: 1, Y: 3}, {X: 2, Y: 3}, {X: 2, Y: 2}},
		{{X: 2, Y: 2}, {X: 2, Y: 3}, {X: 3, Y: 3}, {X: 3, Y: 2}},
	}
	assert.Equal(t, poly32.Polygon{{
		{X: 3, Y: 2},
		{X: 3, Y: 1},
		{X: 1, Y: 1},
		{X: 1, Y: 2},
		{X: 1, Y: 3},
		{X: 3, Y: 3},
	}}, p1.Union(p2))

	p1 = poly32.Polygon{{{X: 2, Y: 1}, {X: 1, Y: 2}, {X: 2, Y: 2}}}
	p2 = poly32.Polygon{{{X: 1, Y: 2}, {X: 2, Y: 2}, {X: 2, Y: 3}, {X: 1, Y: 2}, {X: 2, Y: 2}, {X: 2, Y: 3}}}
	assert.Equal(t, p1, p1.Union(p2))

	assert.Equal(t, poly32.Polygon{{
		{X: 90.0944951638784, Y: 79.13636755015634},
		{X: 55.094495163878435, Y: 139.75814581506702},
		{X: 90.09449516387845, Y: 200.37992407997774},
		{X: 160.09449516387843, Y: 200.37992407997774},
	}}, polygon1.Union(polygon2))

	p1 = poly32.Polygon{{
		{X: 70.78432620601497, Y: -7.668842337087888},
		{X: 42.500054958553065, Y: -19.38457108962598},
		{X: 22.504998288170377, Y: -11.102347436334847},
		{X: 14.215783711091163, Y: -7.668842337087877},
		{X: 2.500054958553072, Y: 20.615428910374025},
		{X: 4.163269713667806, Y: 24.63078452931106},
		{X: -16.386530327112805, Y: 33.142790410257575},
		{X: -28.102259079650896, Y: 61.42706165771948},
	}}
	p2 = poly32.Polygon{{
		{X: 22.504998288170377, Y: -11.102347436334847},
		{X: 14.215783711091163, Y: -7.668842337087877},
		{X: 2.500054958553072, Y: 20.615428910374025},
		{X: 4.163269713667806, Y: 24.63078452931106},
		{X: -16.386530327112805, Y: 33.142790410257575},
		{X: -18.453791204657392, Y: 38.133599657789034},
		{X: -23.270336557414375, Y: 26.505430543378026},
		{X: 16.72966344258562, Y: -13.494569456621978},
		{X: 45.01393469004752, Y: -1.778840704083887},
		{X: 22.504998288170377, Y: -11.102347436334847},
	}}
	assert.Equal(t, poly32.Polygon{{
		{X: 70.78432620601497, Y: -7.668842337087888},
		{X: 42.500054958553065, Y: -19.38457108962598},
		{X: 22.504998288170377, Y: -11.102347436334847},
		{X: 14.215783711091188, Y: -7.668842337087888},
		{X: 22.504998288170377, Y: -11.102347436334847},
		{X: 16.72966344258562, Y: -13.494569456621978},
		{X: -23.270336557414375, Y: 26.505430543378026},
		{X: -18.453791204657392, Y: 38.13359965778903},
		{X: -16.38653, Y: 33.14279},
		{X: -28.102259079650896, Y: 61.42706165771948},
	}}, p1.Union(p2))

	assert.Equal(t, poly32.Polygon{{
		{X: 82.50005495855308, Y: 20.61542891037402},
		{X: 42.500054958553065, Y: -19.38457108962598},
		{X: 2.500054958553072, Y: 20.615428910374025},
		{X: 7.60471431312381, Y: 25.720088264944764},
		{X: 32.55986, Y: 50.675236},
		{X: 42.50005495855307, Y: 60.61542891037402},
	}}, polygon3.Union(polygon4))

	assert.Equal(t, poly32.Polygon{{
		{X: 2, Y: 0.75},
		{X: 3, Y: 0.75},
		{X: 3, Y: 0.25},
		{X: 2, Y: 0.25},
		{X: 2, Y: 0},
		{X: 0, Y: 0},
		{X: 0, Y: 0.25},
		{X: 0, Y: 0.75},
		{X: 0, Y: 1},
		{X: 2, Y: 1},
	}}, rect1.Union(rect2))

	assert.Equal(t, poly32.Polygon{{
		{X: 36, Y: 7},
		{X: 24, Y: 7},
		{X: 23.163773, Y: 7.0438247},
		{X: 22.336706, Y: 7.174819},
		{X: 21.527864, Y: 7.3915477},
		{X: 20.746107, Y: 7.6916366},
		{X: 20, Y: 8.071796},
		{X: 19.297718, Y: 8.527864},
		{X: 18.646955, Y: 9.054841},
		{X: 18.054842, Y: 9.6469555},
		{X: 17.527864, Y: 10.297718},
		{X: 17.071796, Y: 11},
		{X: 16.691637, Y: 11.746107},
		{X: 16.391548, Y: 12.527864},
		{X: 16.17482, Y: 13.336706},
		{X: 16.043825, Y: 14.163773},
		{X: 16, Y: 15},
		{X: 16.043825, Y: 15.836227},
		{X: 16.17482, Y: 16.663294},
		{X: 16.391548, Y: 17.472136},
		{X: 16.691637, Y: 18.253893},
		{X: 17.071796, Y: 19},
		{X: 17.527864, Y: 19.702282},
		{X: 18.054842, Y: 20.353045},
		{X: 18.646955, Y: 20.945158},
		{X: 19.297718, Y: 21.472136},
		{X: 20, Y: 21.928204},
		{X: 20.746107, Y: 22.308363},
		{X: 21.527864, Y: 22.608452},
		{X: 22.336706, Y: 22.82518},
		{X: 23.163773, Y: 22.956175},
		{X: 24, Y: 23},
		{X: 36, Y: 23},
	}}, rect3.Union(circle))
}

func TestIntersect(t *testing.T) {
	assert.Equal(t, poly32.Polygon{{
		{X: 82.84661138052363, Y: 131.51881422166852},
		{X: 66.59206311550543, Y: 159.6725176707606},
		{X: 90.09449516387845, Y: 200.37992407997774},
		{X: 160.09449516387843, Y: 200.37992407997774},
	}}, polygon1.Intersect(polygon2))

	assert.Equal(t, poly32.Polygon{{
		{X: 36.852886624296644, Y: 46.382207361667014},
		{X: 11.897740920349097, Y: 21.42706165771947},
		{X: 7.60471431312381, Y: 25.720088264944764},
		{X: 32.55986001707135, Y: 50.6752339688923},
	}}, polygon3.Intersect(poly32.Polygon{{
		{X: 7.604714313123809, Y: 25.720088264944764},
		{X: 11.897740920349097, Y: 21.42706165771947},
		{X: 36.852886624296644, Y: 46.382207361667014},
		{X: 32.55986001707135, Y: 50.6752339688923},
	}}))

	assert.Equal(t, poly32.Polygon{{
		{X: 2, Y: 0.25},
		{X: 0, Y: 0.25},
		{X: 0, Y: 0.75},
		{X: 2, Y: 0.75},
	}}, rect1.Intersect(rect2))

	assert.Equal(t, poly32.Polygon{{
		{X: 24.83622770614123, Y: 22.956175162946227},
		{X: 25.66329352654208, Y: 22.825180805870485},
		{X: 26.472135954999587, Y: 22.608452130361268},
		{X: 27.253893144606412, Y: 22.308363661140845},
		{X: 28.00000000000001, Y: 21.928203230275546},
		{X: 28.702282018339798, Y: 21.472135954999615},
		{X: 29.35304485087088, Y: 20.945158603819188},
		{X: 29.94515860381917, Y: 20.353044850870898},
		{X: 30.472135954999597, Y: 19.702282018339815},
		{X: 30.92820323027553, Y: 19.00000000000003},
		{X: 31.308363661140827, Y: 18.25389314460643},
		{X: 31.60845213036125, Y: 17.472135954999604},
		{X: 31.825180805870467, Y: 16.6632935265421},
		{X: 31.95617516294621, Y: 15.83622770614125},
		{X: 32.00000000000002, Y: 15.00000000000002},
		{X: 31.95617516294621, Y: 14.16377229385879},
		{X: 31.825180805870467, Y: 13.33670647345794},
		{X: 31.60845213036125, Y: 12.527864045000435},
		{X: 31.308363661140827, Y: 11.746106855393611},
		{X: 30.92820323027553, Y: 11.00000000000001},
		{X: 30.472135954999597, Y: 10.297717981660224},
		{X: 29.94515860381917, Y: 9.646955149129141},
		{X: 29.35304485087088, Y: 9.054841396180851},
		{X: 28.702282018339798, Y: 8.527864045000424},
		{X: 28.00000000000001, Y: 8.071796769724493},
		{X: 27.253893144606412, Y: 7.691636338859195},
		{X: 26.472135954999587, Y: 7.391547869638773},
		{X: 25.66329352654208, Y: 7.174819194129555},
		{X: 24.83622770614123, Y: 7.043824837053814},
		{X: 24, Y: 7},
		{X: 24, Y: 23},
	}}, rect3.Intersect(circle))

	assert.Equal(t, poly32.Polygon{{
		{X: 10, Y: 5},
		{X: 5, Y: 0},
		{X: 0, Y: 5},
		{X: 5, Y: 10},
	}}, poly32.Polygon{{
		{X: 0, Y: 10},
		{X: 0, Y: 0},
		{X: 10, Y: 0},
		{X: 10, Y: 10},
	}}.Intersect(poly32.Polygon{{
		{X: 0, Y: 5},
		{X: 5, Y: 0},
		{X: 10, Y: 5},
		{X: 5, Y: 10},
	}}))

}

func TestSubtract(t *testing.T) {
	assert.Equal(t, poly32.Polygon{{
		{X: 90.0945, Y: 79.13637},
		{X: 55.094494, Y: 139.75815},
		{X: 90.0945, Y: 200.37993},
		{X: 66.592064, Y: 159.67252},
		{X: 82.84661, Y: 131.51881},
		{X: 160.0945, Y: 200.37993},
	}}, polygon1.Subtract(polygon2))

	assert.Equal(t, poly32.Polygon{{
		{X: 82.50005495855308, Y: 20.61542891037402},
		{X: 42.500054958553065, Y: -19.38457108962598},
		{X: 2.500054958553072, Y: 20.615428910374025},
		{X: 7.60471431312381, Y: 25.720088264944764},
		{X: 11.897740920349097, Y: 21.42706165771947},
		{X: 36.852886624296644, Y: 46.382207361667014},
		{X: 32.55986001707135, Y: 50.6752339688923},
		{X: 42.50005495855307, Y: 60.61542891037402},
	}}, polygon3.Subtract(polygon4))

	p1 := poly32.Polygon{{
		{X: 38.5721239031346, Y: 172.33955556881023},
		{X: 39.99999999999999, Y: 171.3397459621556},
		{X: 41.57979856674331, Y: 170.60307379214092},
		{X: 43.2635182233307, Y: 170.15192246987792},
		{X: 45, Y: 170},
		{X: 46.7364817766693, Y: 170.15192246987792},
		{X: 48.42020143325668, Y: 170.60307379214092},
		{X: 50, Y: 171.3397459621556},
		{X: 51.42787609686539, Y: 172.33955556881023},
	}}
	p2 := poly32.Polygon{{
		{X: 51.42787609686539, Y: 172.33955556881023},
		{X: 50, Y: 171.3397459621556},
		{X: 48.42020143325668, Y: 170.60307379214092},
		{X: 46.7364817766693, Y: 170.15192246987792},
		{X: 45, Y: 170},
		{X: 43.2635182233307, Y: 170.15192246987792},
		{X: 42.78116786015871, Y: 170.28116786015872},
		{X: 42.65192246987792, Y: 170.7635182233307},
		{X: 42.5, Y: 172},
	}}
	assert.Equal(t, poly32.Polygon{{
		{X: 42.5, Y: 172},
		{X: 42.65192246987792, Y: 170.7635182233307},
		{X: 42.78116786015871, Y: 170.28116786015872},
		{X: 43.2635182233307, Y: 170.15192246987792},
		{X: 41.57979856674331, Y: 170.60307379214092},
		{X: 39.99999999999999, Y: 171.3397459621556},
		{X: 38.5721239031346, Y: 172.33955556881023},
		{X: 51.42787609686539, Y: 172.33955556881023},
	}}, p1.Subtract(p2))

	assert.Equal(t, poly32.Polygon{
		{
			{X: 2, Y: 0.75},
			{X: 0, Y: 0.75},
			{X: 0, Y: 1},
			{X: 2, Y: 1},
		},
		{
			{X: 2, Y: 0},
			{X: 0, Y: 0},
			{X: 0, Y: 0.25},
			{X: 2, Y: 0.25},
		},
	}, rect1.Subtract(rect2))

	assert.Equal(t, poly32.Polygon{{
		{X: 36, Y: 7},
		{X: 24, Y: 7},
		{X: 24.83622770614123, Y: 7.043824837053814},
		{X: 25.66329352654208, Y: 7.174819194129555},
		{X: 26.472135954999587, Y: 7.391547869638773},
		{X: 27.253893144606412, Y: 7.691636338859195},
		{X: 28.00000000000001, Y: 8.071796769724493},
		{X: 28.702282018339798, Y: 8.527864045000424},
		{X: 29.35304485087088, Y: 9.054841396180851},
		{X: 29.94515860381917, Y: 9.646955149129141},
		{X: 30.472135954999597, Y: 10.297717981660224},
		{X: 30.92820323027553, Y: 11.00000000000001},
		{X: 31.308363661140827, Y: 11.746106855393611},
		{X: 31.60845213036125, Y: 12.527864045000435},
		{X: 31.825180805870467, Y: 13.33670647345794},
		{X: 31.95617516294621, Y: 14.16377229385879},
		{X: 32.00000000000002, Y: 15.00000000000002},
		{X: 31.95617516294621, Y: 15.83622770614125},
		{X: 31.825180805870467, Y: 16.6632935265421},
		{X: 31.60845213036125, Y: 17.472135954999604},
		{X: 31.308363661140827, Y: 18.25389314460643},
		{X: 30.92820323027553, Y: 19.00000000000003},
		{X: 30.472135954999597, Y: 19.702282018339815},
		{X: 29.94515860381917, Y: 20.353044850870898},
		{X: 29.35304485087088, Y: 20.945158603819188},
		{X: 28.702282018339798, Y: 21.472135954999615},
		{X: 28.00000000000001, Y: 21.928203230275546},
		{X: 27.253893144606412, Y: 22.308363661140845},
		{X: 26.472135954999587, Y: 22.608452130361268},
		{X: 25.66329352654208, Y: 22.825180805870485},
		{X: 24.83622770614123, Y: 22.956175162946227},
		{X: 24.000000000000746, Y: 23},
		{X: 36, Y: 23},
	}}, rect3.Subtract(circle))

	p1 = poly32.Polygon{{
		{X: 114, Y: 0},
		{X: 161, Y: 0},
		{X: 114, Y: 168},
	}}
	p2 = poly32.Polygon{{
		{X: 99, Y: 164},
		{X: 114, Y: 108},
		{X: 121, Y: 164},
	}}
	assert.Equal(t, poly32.Polygon{
		{
			{X: 115.11904761904762, Y: 164},
			{X: 114, Y: 164},
			{X: 114, Y: 168},
		},
		{
			{X: 161, Y: 0},
			{X: 114, Y: 0},
			{X: 114, Y: 108},
			{X: 119.18382352941177, Y: 149.47058823529412},
		},
	}, p1.Subtract(p2))

	p1 = poly32.Polygon{{
		{X: 426694.6365274183, Y: -668547.1611580737},
		{X: 426714.57523030025, Y: -668548.9238652373},
		{X: 426745.39648089616, Y: -668550.4651249861},
	}}
	p2 = poly32.Polygon{{
		{X: 426714.5752302991, Y: -668548.9238652373},
		{X: 426744.63718662335, Y: -668550.0591896093},
		{X: 426745.3964821229, Y: -668550.4652243527},
	}}
	assert.Equal(t, poly32.Polygon{{
		{X: 426732.4, Y: -668549.6},
		{X: 426714.56, Y: -668548.94},
		{X: 426694.62, Y: -668547.2},
	}}, p1.Subtract(p2))
}

func TestXor(t *testing.T) {
	assert.Equal(t, poly32.Polygon{
		{
			{X: 2, Y: 0.75},
			{X: 3, Y: 0.75},
			{X: 3, Y: 0.25},
			{X: 2, Y: 0.25},
			{X: 2, Y: 0.75},
			{X: 0, Y: 0.75},
			{X: 0, Y: 1},
			{X: 2, Y: 1},
		},
		{
			{X: 2, Y: 0},
			{X: 0, Y: 0},
			{X: 0, Y: 0.25},
			{X: 2, Y: 0.25},
		},
	}, rect1.Xor(rect2))

	assert.Equal(t, poly32.Polygon{{
		{X: 36, Y: 7},
		{X: 24, Y: 7},
		{X: 24.836227, Y: 7.0438247},
		{X: 25.663294, Y: 7.174819},
		{X: 26.472136, Y: 7.3915477},
		{X: 27.253893, Y: 7.6916366},
		{X: 28, Y: 8.071796},
		{X: 28.702282, Y: 8.527864},
		{X: 29.353045, Y: 9.054841},
		{X: 29.945158, Y: 9.6469555},
		{X: 30.472136, Y: 10.297718},
		{X: 30.928204, Y: 11},
		{X: 31.308363, Y: 11.746107},
		{X: 31.608452, Y: 12.527864},
		{X: 31.82518, Y: 13.336706},
		{X: 31.956175, Y: 14.163773},
		{X: 32, Y: 15},
		{X: 31.956175, Y: 15.836227},
		{X: 31.82518, Y: 16.663294},
		{X: 31.608452, Y: 17.472136},
		{X: 31.308363, Y: 18.253893},
		{X: 30.928204, Y: 19},
		{X: 30.472136, Y: 19.702282},
		{X: 29.945158, Y: 20.353045},
		{X: 29.353045, Y: 20.945158},
		{X: 28.702282, Y: 21.472136},
		{X: 28, Y: 21.928204},
		{X: 27.253893, Y: 22.308363},
		{X: 26.472136, Y: 22.608452},
		{X: 25.663294, Y: 22.82518},
		{X: 24.836227, Y: 22.956175},
		{X: 24, Y: 23},
		{X: 36, Y: 23},
	}, {
		{X: 24, Y: 7},
		{X: 23.163773, Y: 7.0438247},
		{X: 22.336706, Y: 7.174819},
		{X: 21.527864, Y: 7.3915477},
		{X: 20.746107, Y: 7.6916366},
		{X: 20, Y: 8.071796},
		{X: 19.297718, Y: 8.527864},
		{X: 18.646955, Y: 9.054841},
		{X: 18.054842, Y: 9.6469555},
		{X: 17.527864, Y: 10.297718},
		{X: 17.071796, Y: 11},
		{X: 16.691637, Y: 11.746107},
		{X: 16.391548, Y: 12.527864},
		{X: 16.17482, Y: 13.336706},
		{X: 16.043825, Y: 14.163773},
		{X: 16, Y: 15},
		{X: 16.043825, Y: 15.836227},
		{X: 16.17482, Y: 16.663294},
		{X: 16.391548, Y: 17.472136},
		{X: 16.691637, Y: 18.253893},
		{X: 17.071796, Y: 19},
		{X: 17.527864, Y: 19.702282},
		{X: 18.054842, Y: 20.353045},
		{X: 18.646955, Y: 20.945158},
		{X: 19.297718, Y: 21.472136},
		{X: 20, Y: 21.928204},
		{X: 20.746107, Y: 22.308363},
		{X: 21.527864, Y: 22.608452},
		{X: 22.336706, Y: 22.82518},
		{X: 23.163773, Y: 22.956175},
		{X: 24, Y: 23},
	}}, rect3.Xor(circle))
}

func TestNonReductiveSegmentDivisions(t *testing.T) {
	cases := [][]poly32.Polygon{
		{
			{{
				{X: 608000, Y: -113151.36476426799},
				{X: 608000, Y: -114660.04962779157},
				{X: 612000, Y: -115414.39205955336},
				{X: 1.616e+06, Y: -300000},
				{X: 1.608e+06, Y: -303245.6575682382},
				{X: 0, Y: 0},
			}},
			{{
				{X: 1.612e+06, Y: -296000},
			}},
		},
		{
			{{
				{X: -1.8280000000000012e+06, Y: -492999.99999999953},
				{X: -1.8289999999999995e+06, Y: -494000.0000000006},
				{X: -1.828e+06, Y: -493999.9999999991},
				{X: -1.8280000000000012e+06, Y: -492999.99999999953},
			}},
			{{
				{X: -1.8280000000000005e+06, Y: -495999.99999999977},
				{X: -1.8280000000000007e+06, Y: -492000.0000000014},
				{X: -1.8240000000000007e+06, Y: -492000.0000000014},
				{X: -1.8280000000000005e+06, Y: -495999.99999999977},
			}},
		},
		{
			{{
				{X: -2.0199999999999988e+06, Y: -394999.99999999825},
				{X: -2.0199999999999988e+06, Y: -392000.0000000009},
				{X: -2.0240000000000012e+06, Y: -395999.9999999993},
				{X: -2.0199999999999988e+06, Y: -394999.99999999825},
			}},
			{{
				{X: -2.0199999999999988e+06, Y: -394999.99999999825},
				{X: -2.020000000000001e+06, Y: -394000.0000000001},
				{X: -2.0190000000000005e+06, Y: -394999.9999999997},
				{X: -2.0199999999999988e+06, Y: -394999.99999999825},
			}},
		},
		{
			{{
				{X: -47999.99999999992, Y: -23999.999999998756},
				{X: 0, Y: -24000.00000000017},
				{X: 0, Y: 24000.00000000017},
				{X: -48000.00000000014, Y: 24000.00000000017},
				{X: -47999.99999999992, Y: -23999.999999998756},
			}},
			{{
				{X: -48000, Y: -24000},
				{X: 0, Y: -24000},
				{X: 0, Y: 24000},
				{X: -48000, Y: 24000},
				{X: -48000, Y: -24000},
			}},
		},
		{
			{{
				{X: -2.137000000000001e+06, Y: -122000.00000000093},
				{X: -2.1360000000000005e+06, Y: -121999.99999999907},
				{X: -2.1360000000000014e+06, Y: -121000.00000000186},
			}},
			{{
				{X: -2.1120000000000005e+06, Y: -120000},
				{X: -2.136000000000001e+06, Y: -120000.00000000093},
				{X: -2.1360000000000005e+06, Y: -144000},
			}},
		},
		{
			{{
				{X: 1.556e+06, Y: -1.139999999999999e+06},
				{X: 1.5600000000000002e+06, Y: -1.140000000000001e+06},
				{X: 1.56e+06, Y: -1.136000000000001e+06},
			}},
			{{
				{X: 1.56e+06, Y: -1.127999999999999e+06},
				{X: 1.5600000000000002e+06, Y: -1.151999999999999e+06},
			}},
		},
		{
			{{
				{X: 1.427255375e+06, Y: -2.3283064365386963e-10},
				{X: 1.4271285e+06, Y: 134.7111358642578},
				{X: 1.427109e+06, Y: 178.30108642578125},
			}},
			{{
				{X: 1.416e+06, Y: -12000},
				{X: 1.428e+06, Y: -12000},
				{X: 1.428e+06, Y: 0},
				{X: 1.416e+06, Y: 0},
				{X: 1.416e+06, Y: -12000},
			}},
		},
		{
			{{
				{X: 1.7714672107465276e+06, Y: -102506.68254093888},
				{X: 1.7713768917571804e+06, Y: -102000.75485953009},
				{X: 1.7717109214841307e+06, Y: -101912.19625031832},
			}},
			{{
				{X: 1.7714593229229522e+06, Y: -102470.35230830211},
				{X: 1.7714672107465276e+06, Y: -102506.68254093867},
				{X: 1.771439738086082e+06, Y: -102512.92027456204},
			}},
		},
		{
			{{
				{X: 1.0958876176594219e+06, Y: -567467.5197556159},
				{X: 1.0956330600760083e+06, Y: -567223.72588934},
				{X: 1.0958876176594219e+06, Y: -567467.5197556159},
			}},
			{{
				{X: 1.0953516248896217e+06, Y: -564135.1861293605},
				{X: 1.0959085007300845e+06, Y: -568241.1879245406},
				{X: 1.0955136237022132e+06, Y: -581389.3748769956},
			}},
		},
		{
			{{
				{X: 1.1458356382266793e+06, Y: -251939.4635597784},
				{X: 1.1460824662209095e+06, Y: -251687.86194535438},
				{X: 1.1458356382266793e+06, Y: -251939.4635597784},
			}},
			{{
				{X: 1.1486683769211173e+06, Y: -251759.06331944838},
				{X: 1.1468807511323579e+06, Y: -251379.90576799586},
				{X: 1.1457914974731328e+06, Y: -251816.31287551578},
			}},
		},
		{
			{{
				{X: 426694.6365274183, Y: -668547.1611580737},
				{X: 426714.57523030025, Y: -668548.9238652373},
				{X: 426745.39648089616, Y: -668550.4651249861},
			}},
			{{
				{X: 426714.5752302991, Y: -668548.9238652373},
				{X: 426744.63718662335, Y: -668550.0591896093},
				{X: 426745.3964821229, Y: -668550.4652243527},
			}},
		},
		{
			{{
				{X: 99.67054939325573, Y: 23.50752393246498},
				{X: 99.88993946188153, Y: 20.999883973365655},
				{X: 100.01468418889, Y: 20.53433031419374},
			}},
			{{
				{X: 100.15374164547939, Y: 20.015360821030836},
				{X: 95.64222842284941, Y: 36.85255738690467},
				{X: 100.15374164547939, Y: -14.714274712355238},
			}},
		},
	}
	for i, c := range cases {
		for angle := 0; angle < 360; angle++ {
			angleRadians := 2 * math.Pi * float32(angle) / 360
			subject := rotate(c[0], angleRadians)
			clipping := rotate(c[1], angleRadians)
			unionChan := make(chan poly32.Polygon)
			go func() {
				unionChan <- subject.Union(clipping)
			}()
			select {
			case <-unionChan:
			case <-time.After(1 * time.Second):
				assert.Fail(t, "Union timed out", "Case %d, angle %d", i, angle)
			}
			intersectChan := make(chan poly32.Polygon)
			go func() {
				intersectChan <- subject.Intersect(clipping)
			}()
			select {
			case <-intersectChan:
			case <-time.After(1 * time.Second):
				assert.Fail(t, "Intersect timed out", "Case %d, angle %d", i, angle)
			}
			subtractChan := make(chan poly32.Polygon)
			go func() {
				subtractChan <- subject.Intersect(clipping)
			}()
			select {
			case <-subtractChan:
			case <-time.After(1 * time.Second):
				assert.Fail(t, "Subtract timed out", "Case %d, angle %d", i, angle)
			}
			xorChan := make(chan poly32.Polygon)
			go func() {
				xorChan <- subject.Intersect(clipping)
			}()
			select {
			case <-xorChan:
			case <-time.After(1 * time.Second):
				assert.Fail(t, "Xor timed out", "Case %d, angle %d", i, angle)
			}
		}
	}
}

func rotate(p poly32.Polygon, radians float32) poly32.Polygon {
	result := p.Clone()
	for i, contour := range p {
		result[i] = make(poly32.Contour, len(contour))
		for j, point := range contour {
			result[i][j] = geom32.Point{
				X: point.X*mathf32.Cos(radians) - point.Y*mathf32.Sin(radians),
				Y: point.Y*mathf32.Cos(radians) + point.X*mathf32.Sin(radians),
			}
		}
	}
	return result
}

var (
	rect1 = poly32.Polygon{
		{
			{X: 0, Y: 0},
			{X: 1, Y: 0},
			{X: 1, Y: 1},
			{X: 0, Y: 1},
		},
		{
			{X: 1, Y: 0},
			{X: 2, Y: 0},
			{X: 2, Y: 1},
			{X: 1, Y: 1},
		},
	}
	rect2 = poly32.Polygon{{
		{X: 0, Y: 0.25},
		{X: 3, Y: 0.25},
		{X: 3, Y: 0.75},
		{X: 0, Y: 0.75},
	}}
	rect3 = poly32.Polygon{{
		{X: 24, Y: 7},
		{X: 36, Y: 7},
		{X: 36, Y: 23},
		{X: 24, Y: 23},
	}}
	circle = poly32.Polygon{{
		{X: 24, Y: 7},
		{X: 24.83622770614123, Y: 7.043824837053814},
		{X: 25.66329352654208, Y: 7.174819194129555},
		{X: 26.472135954999587, Y: 7.391547869638773},
		{X: 27.253893144606412, Y: 7.691636338859195},
		{X: 28.00000000000001, Y: 8.071796769724493},
		{X: 28.702282018339798, Y: 8.527864045000424},
		{X: 29.35304485087088, Y: 9.054841396180851},
		{X: 29.94515860381917, Y: 9.646955149129141},
		{X: 30.472135954999597, Y: 10.297717981660224},
		{X: 30.92820323027553, Y: 11.00000000000001},
		{X: 31.308363661140827, Y: 11.746106855393611},
		{X: 31.60845213036125, Y: 12.527864045000435},
		{X: 31.825180805870467, Y: 13.33670647345794},
		{X: 31.95617516294621, Y: 14.16377229385879},
		{X: 32.00000000000002, Y: 15.00000000000002},
		{X: 31.95617516294621, Y: 15.83622770614125},
		{X: 31.825180805870467, Y: 16.6632935265421},
		{X: 31.60845213036125, Y: 17.472135954999604},
		{X: 31.308363661140827, Y: 18.25389314460643},
		{X: 30.92820323027553, Y: 19.00000000000003},
		{X: 30.472135954999597, Y: 19.702282018339815},
		{X: 29.94515860381917, Y: 20.353044850870898},
		{X: 29.35304485087088, Y: 20.945158603819188},
		{X: 28.702282018339798, Y: 21.472135954999615},
		{X: 28.00000000000001, Y: 21.928203230275546},
		{X: 27.253893144606412, Y: 22.308363661140845},
		{X: 26.472135954999587, Y: 22.608452130361268},
		{X: 25.66329352654208, Y: 22.825180805870485},
		{X: 24.83622770614123, Y: 22.956175162946227},
		{X: 24, Y: 23.00000000000004},
		{X: 23.16377229385877, Y: 22.956175162946227},
		{X: 22.33670647345792, Y: 22.825180805870485},
		{X: 21.527864045000413, Y: 22.608452130361268},
		{X: 20.746106855393588, Y: 22.308363661140845},
		{X: 19.99999999999999, Y: 21.928203230275546},
		{X: 19.297717981660202, Y: 21.472135954999615},
		{X: 18.64695514912912, Y: 20.945158603819188},
		{X: 18.05484139618083, Y: 20.353044850870898},
		{X: 17.527864045000403, Y: 19.702282018339815},
		{X: 17.07179676972447, Y: 19.00000000000003},
		{X: 16.691636338859173, Y: 18.25389314460643},
		{X: 16.39154786963875, Y: 17.472135954999604},
		{X: 16.174819194129533, Y: 16.6632935265421},
		{X: 16.04382483705379, Y: 15.83622770614125},
		{X: 15.999999999999977, Y: 15.00000000000002},
		{X: 16.04382483705379, Y: 14.16377229385879},
		{X: 16.174819194129533, Y: 13.33670647345794},
		{X: 16.39154786963875, Y: 12.527864045000435},
		{X: 16.691636338859173, Y: 11.746106855393611},
		{X: 17.07179676972447, Y: 11.00000000000001},
		{X: 17.527864045000403, Y: 10.297717981660224},
		{X: 18.05484139618083, Y: 9.646955149129141},
		{X: 18.64695514912912, Y: 9.054841396180851},
		{X: 19.297717981660202, Y: 8.527864045000424},
		{X: 19.99999999999999, Y: 8.071796769724493},
		{X: 20.746106855393588, Y: 7.691636338859194},
		{X: 21.527864045000413, Y: 7.391547869638772},
		{X: 22.33670647345792, Y: 7.1748191941295545},
		{X: 23.16377229385877, Y: 7.043824837053813},
	}}
	polygon1 = poly32.Polygon{{
		{X: 160.09449516387843, Y: 200.37992407997774},
		{X: 90.09449516387845, Y: 200.37992407997774},
		{X: 55.094495163878435, Y: 139.75814581506702},
		{X: 90.0944951638784, Y: 79.13636755015634},
	}}
	polygon2 = poly32.Polygon{{
		{X: 82.84661138052363, Y: 131.51881422166852},
		{X: 66.59206311550543, Y: 159.6725176707606},
		{X: 90.09449516387845, Y: 200.37992407997774},
		{X: 160.09449516387843, Y: 200.37992407997774},
	}}
	polygon3 = poly32.Polygon{{
		{X: 2.500054958553072, Y: 20.615428910374025},
		{X: 42.500054958553065, Y: -19.38457108962598},
		{X: 82.50005495855308, Y: 20.61542891037402},
		{X: 42.50005495855307, Y: 60.61542891037402},
	}}
	polygon4 = poly32.Polygon{{
		{X: 7.604714313123809, Y: 25.720088264944764},
		{X: 32.55986001707135, Y: 50.6752339688923},
		{X: 36.852886624296644, Y: 46.382207361667014},
		{X: 11.897740920349097, Y: 21.42706165771947},
	}}
)
