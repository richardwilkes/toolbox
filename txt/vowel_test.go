package txt

import (
	"testing"

	"github.com/richardwilkes/toolbox/v2/check"
)

func TestIsVowel(t *testing.T) {
	c := check.New(t)

	// Test basic English vowels - lowercase
	c.True(IsVowel('a'))
	c.True(IsVowel('e'))
	c.True(IsVowel('i'))
	c.True(IsVowel('o'))
	c.True(IsVowel('u'))

	// Test basic English vowels - uppercase
	c.True(IsVowel('A'))
	c.True(IsVowel('E'))
	c.True(IsVowel('I'))
	c.True(IsVowel('O'))
	c.True(IsVowel('U'))

	// Test 'y' is not a vowel in IsVowel
	c.False(IsVowel('y'))
	c.False(IsVowel('Y'))

	// Test accented 'a' vowels
	c.True(IsVowel('√†'))
	c.True(IsVowel('√°'))
	c.True(IsVowel('√¢'))
	c.True(IsVowel('√§'))
	c.True(IsVowel('√¶'))
	c.True(IsVowel('√£'))
	c.True(IsVowel('√•'))
	c.True(IsVowel('ƒÅ'))

	// Test accented 'a' vowels - uppercase
	c.True(IsVowel('√Ä'))
	c.True(IsVowel('√Å'))
	c.True(IsVowel('√Ç'))
	c.True(IsVowel('√Ñ'))
	c.True(IsVowel('√Ü'))
	c.True(IsVowel('√É'))
	c.True(IsVowel('√Ö'))
	c.True(IsVowel('ƒÄ'))

	// Test accented 'e' vowels
	c.True(IsVowel('√®'))
	c.True(IsVowel('√©'))
	c.True(IsVowel('√™'))
	c.True(IsVowel('√´'))
	c.True(IsVowel('ƒì'))
	c.True(IsVowel('ƒó'))
	c.True(IsVowel('ƒô'))

	// Test accented 'e' vowels - uppercase
	c.True(IsVowel('√à'))
	c.True(IsVowel('√â'))
	c.True(IsVowel('√ä'))
	c.True(IsVowel('√ã'))
	c.True(IsVowel('ƒí'))
	c.True(IsVowel('ƒñ'))
	c.True(IsVowel('ƒò'))

	// Test accented 'i' vowels
	c.True(IsVowel('√Æ'))
	c.True(IsVowel('√Ø'))
	c.True(IsVowel('√≠'))
	c.True(IsVowel('ƒ´'))
	c.True(IsVowel('ƒØ'))
	c.True(IsVowel('√¨'))

	// Test accented 'i' vowels - uppercase
	c.True(IsVowel('√é'))
	c.True(IsVowel('√è'))
	c.True(IsVowel('√ç'))
	c.True(IsVowel('ƒ™'))
	c.True(IsVowel('ƒÆ'))
	c.True(IsVowel('√å'))

	// Test accented 'o' vowels
	c.True(IsVowel('√¥'))
	c.True(IsVowel('√∂'))
	c.True(IsVowel('√≤'))
	c.True(IsVowel('√≥'))
	c.True(IsVowel('≈ì'))
	c.True(IsVowel('√∏'))
	c.True(IsVowel('≈ç'))
	c.True(IsVowel('√µ'))

	// Test accented 'o' vowels - uppercase
	c.True(IsVowel('√î'))
	c.True(IsVowel('√ñ'))
	c.True(IsVowel('√í'))
	c.True(IsVowel('√ì'))
	c.True(IsVowel('≈í'))
	c.True(IsVowel('√ò'))
	c.True(IsVowel('≈å'))
	c.True(IsVowel('√ï'))

	// Test accented 'u' vowels
	c.True(IsVowel('√ª'))
	c.True(IsVowel('√º'))
	c.True(IsVowel('√π'))
	c.True(IsVowel('√∫'))
	c.True(IsVowel('≈´'))

	// Test accented 'u' vowels - uppercase
	c.True(IsVowel('√õ'))
	c.True(IsVowel('√ú'))
	c.True(IsVowel('√ô'))
	c.True(IsVowel('√ö'))
	c.True(IsVowel('≈™'))

	// Test consonants - lowercase
	c.False(IsVowel('b'))
	c.False(IsVowel('c'))
	c.False(IsVowel('d'))
	c.False(IsVowel('f'))
	c.False(IsVowel('g'))
	c.False(IsVowel('h'))
	c.False(IsVowel('j'))
	c.False(IsVowel('k'))
	c.False(IsVowel('l'))
	c.False(IsVowel('m'))
	c.False(IsVowel('n'))
	c.False(IsVowel('p'))
	c.False(IsVowel('q'))
	c.False(IsVowel('r'))
	c.False(IsVowel('s'))
	c.False(IsVowel('t'))
	c.False(IsVowel('v'))
	c.False(IsVowel('w'))
	c.False(IsVowel('x'))
	c.False(IsVowel('z'))

	// Test consonants - uppercase
	c.False(IsVowel('B'))
	c.False(IsVowel('C'))
	c.False(IsVowel('D'))
	c.False(IsVowel('F'))
	c.False(IsVowel('G'))
	c.False(IsVowel('H'))
	c.False(IsVowel('J'))
	c.False(IsVowel('K'))
	c.False(IsVowel('L'))
	c.False(IsVowel('M'))
	c.False(IsVowel('N'))
	c.False(IsVowel('P'))
	c.False(IsVowel('Q'))
	c.False(IsVowel('R'))
	c.False(IsVowel('S'))
	c.False(IsVowel('T'))
	c.False(IsVowel('V'))
	c.False(IsVowel('W'))
	c.False(IsVowel('X'))
	c.False(IsVowel('Z'))

	// Test numbers
	c.False(IsVowel('0'))
	c.False(IsVowel('1'))
	c.False(IsVowel('2'))
	c.False(IsVowel('3'))
	c.False(IsVowel('4'))
	c.False(IsVowel('5'))
	c.False(IsVowel('6'))
	c.False(IsVowel('7'))
	c.False(IsVowel('8'))
	c.False(IsVowel('9'))

	// Test special characters
	c.False(IsVowel(' '))
	c.False(IsVowel('!'))
	c.False(IsVowel('@'))
	c.False(IsVowel('#'))
	c.False(IsVowel('$'))
	c.False(IsVowel('%'))
	c.False(IsVowel('^'))
	c.False(IsVowel('&'))
	c.False(IsVowel('*'))
	c.False(IsVowel('('))
	c.False(IsVowel(')'))
	c.False(IsVowel('-'))
	c.False(IsVowel('_'))
	c.False(IsVowel('='))
	c.False(IsVowel('+'))
	c.False(IsVowel('['))
	c.False(IsVowel(']'))
	c.False(IsVowel('{'))
	c.False(IsVowel('}'))
	c.False(IsVowel('\\'))
	c.False(IsVowel('|'))
	c.False(IsVowel(';'))
	c.False(IsVowel(':'))
	c.False(IsVowel('\''))
	c.False(IsVowel('"'))
	c.False(IsVowel(','))
	c.False(IsVowel('.'))
	c.False(IsVowel('<'))
	c.False(IsVowel('>'))
	c.False(IsVowel('/'))
	c.False(IsVowel('?'))

	// Test Unicode characters that are not vowels
	c.False(IsVowel('√±'))
	c.False(IsVowel('√ß'))
	c.False(IsVowel('√ü'))
	c.False(IsVowel('≈Ç'))

	// Test emoji
	c.False(IsVowel('üòÄ'))
	c.False(IsVowel('üöÄ'))
	c.False(IsVowel('üéâ'))

	// Test whitespace characters
	c.False(IsVowel('\n'))
	c.False(IsVowel('\t'))
	c.False(IsVowel('\r'))

	// Test null character
	c.False(IsVowel('\x00'))
}

func TestIsVowely(t *testing.T) {
	c := check.New(t)

	// Test that IsVowely includes all regular vowels
	c.True(IsVowely('a'))
	c.True(IsVowely('e'))
	c.True(IsVowely('i'))
	c.True(IsVowely('o'))
	c.True(IsVowely('u'))
	c.True(IsVowely('A'))
	c.True(IsVowely('E'))
	c.True(IsVowely('I'))
	c.True(IsVowely('O'))
	c.True(IsVowely('U'))

	// Test 'y' is considered a vowel in IsVowely
	c.True(IsVowely('y'))
	c.True(IsVowely('Y'))

	// Test accented 'y'
	c.True(IsVowely('√ø'))
	c.True(IsVowely('≈∏'))

	// Test all accented vowels work in IsVowely
	c.True(IsVowely('√†'))
	c.True(IsVowely('√©'))
	c.True(IsVowely('√Æ'))
	c.True(IsVowely('√¥'))
	c.True(IsVowely('√º'))
	c.True(IsVowely('√Ä'))
	c.True(IsVowely('√â'))
	c.True(IsVowely('√é'))
	c.True(IsVowely('√î'))
	c.True(IsVowely('√ú'))

	// Test consonants are still not vowels
	c.False(IsVowely('b'))
	c.False(IsVowely('c'))
	c.False(IsVowely('d'))
	c.False(IsVowely('f'))
	c.False(IsVowely('g'))
	c.False(IsVowely('h'))
	c.False(IsVowely('j'))
	c.False(IsVowely('k'))
	c.False(IsVowely('l'))
	c.False(IsVowely('m'))
	c.False(IsVowely('n'))
	c.False(IsVowely('p'))
	c.False(IsVowely('q'))
	c.False(IsVowely('r'))
	c.False(IsVowely('s'))
	c.False(IsVowely('t'))
	c.False(IsVowely('v'))
	c.False(IsVowely('w'))
	c.False(IsVowely('x'))
	c.False(IsVowely('z'))

	// Test consonants - uppercase
	c.False(IsVowely('B'))
	c.False(IsVowely('C'))
	c.False(IsVowely('D'))
	c.False(IsVowely('F'))
	c.False(IsVowely('G'))
	c.False(IsVowely('H'))
	c.False(IsVowely('J'))
	c.False(IsVowely('K'))
	c.False(IsVowely('L'))
	c.False(IsVowely('M'))
	c.False(IsVowely('N'))
	c.False(IsVowely('P'))
	c.False(IsVowely('Q'))
	c.False(IsVowely('R'))
	c.False(IsVowely('S'))
	c.False(IsVowely('T'))
	c.False(IsVowely('V'))
	c.False(IsVowely('W'))
	c.False(IsVowely('X'))
	c.False(IsVowely('Z'))

	// Test numbers
	c.False(IsVowely('0'))
	c.False(IsVowely('1'))
	c.False(IsVowely('2'))
	c.False(IsVowely('3'))
	c.False(IsVowely('4'))
	c.False(IsVowely('5'))
	c.False(IsVowely('6'))
	c.False(IsVowely('7'))
	c.False(IsVowely('8'))
	c.False(IsVowely('9'))

	// Test special characters
	c.False(IsVowely(' '))
	c.False(IsVowely('!'))
	c.False(IsVowely('@'))
	c.False(IsVowely('#'))
	c.False(IsVowely('$'))
	c.False(IsVowely('%'))

	// Test emoji
	c.False(IsVowely('üòÄ'))
	c.False(IsVowely('üöÄ'))
	c.False(IsVowely('üéâ'))
}

func TestVowelCheckerInterface(t *testing.T) {
	c := check.New(t)

	// Test that IsVowel can be used as VowelChecker
	var vowelChecker VowelChecker = IsVowel
	c.True(vowelChecker('a'))
	c.True(vowelChecker('E'))
	c.False(vowelChecker('y'))
	c.False(vowelChecker('b'))

	// Test that IsVowely can be used as VowelChecker
	var vowelyChecker VowelChecker = IsVowely
	c.True(vowelyChecker('a'))
	c.True(vowelyChecker('E'))
	c.True(vowelyChecker('y'))
	c.True(vowelyChecker('Y'))
	c.False(vowelyChecker('b'))

	// Test custom VowelChecker that only accepts 'a' and 'e'
	customChecker := func(ch rune) bool {
		return ch == 'a' || ch == 'e' || ch == 'A' || ch == 'E'
	}
	c.True(customChecker('a'))
	c.True(customChecker('e'))
	c.True(customChecker('A'))
	c.True(customChecker('E'))
	c.False(customChecker('i'))
	c.False(customChecker('o'))
	c.False(customChecker('u'))
	c.False(customChecker('y'))
}

func TestVowelEdgeCases(t *testing.T) {
	c := check.New(t)

	// Test case sensitivity is properly handled for all vowels
	vowelPairs := map[rune]rune{
		'a': 'A', 'e': 'E', 'i': 'I', 'o': 'O', 'u': 'U',
		'√†': '√Ä', '√°': '√Å', '√¢': '√Ç', '√§': '√Ñ', '√¶': '√Ü', '√£': '√É', '√•': '√Ö', 'ƒÅ': 'ƒÄ',
		'√®': '√à', '√©': '√â', '√™': '√ä', '√´': '√ã', 'ƒì': 'ƒí', 'ƒó': 'ƒñ', 'ƒô': 'ƒò',
		'√Æ': '√é', '√Ø': '√è', '√≠': '√ç', 'ƒ´': 'ƒ™', 'ƒØ': 'ƒÆ', '√¨': '√å',
		'√¥': '√î', '√∂': '√ñ', '√≤': '√í', '√≥': '√ì', '≈ì': '≈í', '√∏': '√ò', '≈ç': '≈å', '√µ': '√ï',
		'√ª': '√õ', '√º': '√ú', '√π': '√ô', '√∫': '√ö', '≈´': '≈™',
	}

	for lower, upper := range vowelPairs {
		c.True(IsVowel(lower))
		c.True(IsVowel(upper))
		c.True(IsVowely(lower))
		c.True(IsVowely(upper))
	}

	// Test 'y' case sensitivity for IsVowely
	c.True(IsVowely('y'))
	c.True(IsVowely('Y'))
	c.True(IsVowely('√ø'))
	c.True(IsVowely('≈∏'))

	// Test that non-vowel accented characters are still not vowels
	c.False(IsVowel('√±'))
	c.False(IsVowel('√ë'))
	c.False(IsVowel('√ß'))
	c.False(IsVowel('√á'))
	c.False(IsVowely('√±'))
	c.False(IsVowely('√ë'))
	c.False(IsVowely('√ß'))
	c.False(IsVowely('√á'))

	// Test some similar-looking but different Unicode characters
	c.True(IsVowel('ƒÅ'))  // This is in the vowel list
	c.False(IsVowel('ƒÉ')) // This is not in the vowel list
	c.False(IsVowel('ƒÖ')) // This is not in the vowel list

	// Test mathematical and other Unicode symbols
	c.False(IsVowel('Œ±')) // Greek alpha
	c.False(IsVowel('Œµ')) // Greek epsilon
	c.False(IsVowel('Œπ')) // Greek iota
	c.False(IsVowel('Œø')) // Greek omicron
	c.False(IsVowel('œÖ')) // Greek upsilon
	c.False(IsVowely('Œ±'))
	c.False(IsVowely('Œµ'))
	c.False(IsVowely('Œπ'))
	c.False(IsVowely('Œø'))
	c.False(IsVowely('œÖ'))
}

func TestVowelComprehensiveCoverage(t *testing.T) {
	c := check.New(t)

	// Test every vowel explicitly listed in the switch cases

	// All 'a' variants
	aVowels := []rune{'a', '√†', '√°', '√¢', '√§', '√¶', '√£', '√•', 'ƒÅ'}
	for _, vowel := range aVowels {
		c.True(IsVowel(vowel))
		c.True(IsVowely(vowel))
	}

	// All 'e' variants
	eVowels := []rune{'e', '√®', '√©', '√™', '√´', 'ƒì', 'ƒó', 'ƒô'}
	for _, vowel := range eVowels {
		c.True(IsVowel(vowel))
		c.True(IsVowely(vowel))
	}

	// All 'i' variants
	iVowels := []rune{'i', '√Æ', '√Ø', '√≠', 'ƒ´', 'ƒØ', '√¨'}
	for _, vowel := range iVowels {
		c.True(IsVowel(vowel))
		c.True(IsVowely(vowel))
	}

	// All 'o' variants
	oVowels := []rune{'o', '√¥', '√∂', '√≤', '√≥', '≈ì', '√∏', '≈ç', '√µ'}
	for _, vowel := range oVowels {
		c.True(IsVowel(vowel))
		c.True(IsVowely(vowel))
	}

	// All 'u' variants
	uVowels := []rune{'u', '√ª', '√º', '√π', '√∫', '≈´'}
	for _, vowel := range uVowels {
		c.True(IsVowel(vowel))
		c.True(IsVowely(vowel))
	}

	// 'y' variants (only in IsVowely)
	yVowels := []rune{'y', '√ø'}
	for _, vowel := range yVowels {
		c.False(IsVowel(vowel))
		c.True(IsVowely(vowel))
	}
}
