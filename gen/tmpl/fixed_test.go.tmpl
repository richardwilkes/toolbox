// Copyright Â©2016-2022 by Richard A. Wilkes. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, version 2.0. If a copy of the MPL was not distributed with
// this file, You can obtain one at http://mozilla.org/MPL/2.0/.
//
// This Source Code Form is "Incompatible With Secondary Licenses", as
// defined by the Mozilla Public License, version 2.0.

package f{{.Bits}}d{{.Digits}}_test

import (
	"encoding/json"
	"testing"

	"github.com/richardwilkes/toolbox/xmath/fixed/f{{.Bits}}d{{.Digits}}"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"gopkg.in/yaml.v3"
)

type embedded struct {
	Field f{{.Bits}}d{{.Digits}}.Int
}

func TestConversion(t *testing.T) {
	assert.Equal(t, "0.1", f{{.Bits}}d{{.Digits}}.FromFloat64(0.1).String())
	assert.Equal(t, "0.2", f{{.Bits}}d{{.Digits}}.FromFloat64(0.2).String())
	assert.Equal(t, "0.3", f{{.Bits}}d{{.Digits}}.FromStringForced("0.3").String())
	assert.Equal(t, "-0.1", f{{.Bits}}d{{.Digits}}.FromFloat64(-0.1).String())
	assert.Equal(t, "-0.2", f{{.Bits}}d{{.Digits}}.FromFloat64(-0.2).String())
	assert.Equal(t, "-0.3", f{{.Bits}}d{{.Digits}}.FromStringForced("-0.3").String())
	assert.Equal(t, "0.{{repeat "3" .Digits}}", f{{.Bits}}d{{.Digits}}.FromStringForced("0.{{repeat "3" (add .Digits 2)}}").String())
	assert.Equal(t, "-0.{{repeat "3" .Digits}}", f{{.Bits}}d{{.Digits}}.FromStringForced("-0.{{repeat "3" (add .Digits 2)}}").String())
	assert.Equal(t, "0.{{repeat "6" .Digits}}", f{{.Bits}}d{{.Digits}}.FromStringForced("0.{{repeat "6" (add .Digits 2)}}").String())
	assert.Equal(t, "-0.{{repeat "6" .Digits}}", f{{.Bits}}d{{.Digits}}.FromStringForced("-0.{{repeat "6" (add .Digits 2)}}").String())
	assert.Equal(t, "1", f{{.Bits}}d{{.Digits}}.FromFloat64(1.{{repeat "0" .Digits}}4).String())
	assert.Equal(t, "1", f{{.Bits}}d{{.Digits}}.FromFloat64(1.{{repeat "0" .Digits}}49).String())
	assert.Equal(t, "1", f{{.Bits}}d{{.Digits}}.FromFloat64(1.{{repeat "0" .Digits}}5).String())
	assert.Equal(t, "1", f{{.Bits}}d{{.Digits}}.FromFloat64(1.{{repeat "0" .Digits}}9).String())
	assert.Equal(t, "-1", f{{.Bits}}d{{.Digits}}.FromFloat64(-1.{{repeat "0" .Digits}}4).String())
	assert.Equal(t, "-1", f{{.Bits}}d{{.Digits}}.FromFloat64(-1.{{repeat "0" .Digits}}49).String())
	assert.Equal(t, "-1", f{{.Bits}}d{{.Digits}}.FromFloat64(-1.{{repeat "0" .Digits}}5).String())
	assert.Equal(t, "-1", f{{.Bits}}d{{.Digits}}.FromFloat64(-1.{{repeat "0" .Digits}}9).String())
	assert.Equal(t, "0.{{repeat "0" (sub .Digits 1)}}4", f{{.Bits}}d{{.Digits}}.FromStringForced("0.{{repeat "0" (sub .Digits 1)}}405").String())
	assert.Equal(t, "-0.{{repeat "0" (sub .Digits 1)}}4", f{{.Bits}}d{{.Digits}}.FromStringForced("-0.{{repeat "0" (sub .Digits 1)}}405").String())

	v, err := f{{.Bits}}d{{.Digits}}.FromString("33.0")
	assert.NoError(t, err)
	assert.Equal(t, v, f{{.Bits}}d{{.Digits}}.FromInt(33))

	v, err = f{{.Bits}}d{{.Digits}}.FromString("33.00000000000000000000")
	assert.NoError(t, err)
	assert.Equal(t, v, f{{.Bits}}d{{.Digits}}.FromInt(33))
}

func TestAddSub(t *testing.T) {
	oneThird := f{{.Bits}}d{{.Digits}}.FromStringForced("0.{{repeat "3" .Digits}}")
	negTwoThirds := f{{.Bits}}d{{.Digits}}.FromStringForced("-0.{{repeat "6" .Digits}}")
	one := f{{.Bits}}d{{.Digits}}.FromInt(1)
	oneAndTwoThirds := f{{.Bits}}d{{.Digits}}.FromStringForced("1.{{repeat "6" .Digits}}")
	nineThousandSix := f{{.Bits}}d{{.Digits}}.FromInt(9006)
	two := f{{.Bits}}d{{.Digits}}.FromInt(2)
	assert.Equal(t, "0.{{repeat "9" .Digits}}", (oneThird{{if eq .Bits 64}} + oneThird + oneThird{{else}}.Add(oneThird).Add(oneThird){{end}}).String())
	assert.Equal(t, "0.{{repeat "6" (sub .Digits 1)}}7", (one{{if eq .Bits 64}} - oneThird{{else}}.Sub(oneThird){{end}}).String())
	assert.Equal(t, "-1.{{repeat "6" .Digits}}", (negTwoThirds{{if eq .Bits 64}} - one{{else}}.Sub(one){{end}}).String())
	assert.Equal(t, "0", (negTwoThirds{{if eq .Bits 64}} - one + oneAndTwoThirds{{else}}.Sub(one).Add(oneAndTwoThirds){{end}}).String())
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromInt(10240), f{{.Bits}}d{{.Digits}}.FromInt(1234){{if eq .Bits 64}}+nineThousandSix{{else}}.Add(nineThousandSix){{end}})
	assert.Equal(t, "10240", (f{{.Bits}}d{{.Digits}}.FromInt(1234){{if eq .Bits 64}} + nineThousandSix{{else}}.Add(nineThousandSix){{end}}).String())
	assert.Equal(t, "-1.5", (f{{.Bits}}d{{.Digits}}.FromFloat64(0.5){{if eq .Bits 64}} - two{{else}}.Sub(two){{end}}).String())
	{{- if gt .Digits 1}}
	ninetyPointZeroSix := f{{.Bits}}d{{.Digits}}.FromStringForced("90.06")
	twelvePointThirtyFour := f{{.Bits}}d{{.Digits}}.FromStringForced("12.34")
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromStringForced("102.4"), twelvePointThirtyFour{{if eq .Bits 64}}+ninetyPointZeroSix{{else}}.Add(ninetyPointZeroSix){{end}})
	assert.Equal(t, "102.4", (twelvePointThirtyFour{{if eq .Bits 64}} + ninetyPointZeroSix{{else}}.Add(ninetyPointZeroSix){{end}}).String())
	{{- end}}
}

func TestMulDiv(t *testing.T) {
	pointThree := f{{.Bits}}d{{.Digits}}.FromStringForced("0.3")
	negativePointThree := f{{.Bits}}d{{.Digits}}.FromStringForced("-0.3")
	assert.Equal(t, "0.{{repeat "3" .Digits}}", f{{.Bits}}d{{.Digits}}.FromInt(1).Div(f{{.Bits}}d{{.Digits}}.FromInt(3)).String())
	assert.Equal(t, "-0.{{repeat "3" .Digits}}", f{{.Bits}}d{{.Digits}}.FromInt(1).Div(f{{.Bits}}d{{.Digits}}.FromInt(-3)).String())
	assert.Equal(t, "0.1", pointThree.Div(f{{.Bits}}d{{.Digits}}.FromInt(3)).String())
	assert.Equal(t, "0.9", pointThree.Mul(f{{.Bits}}d{{.Digits}}.FromInt(3)).String())
	assert.Equal(t, "-0.9", negativePointThree.Mul(f{{.Bits}}d{{.Digits}}.FromInt(3)).String())
}

func TestMod(t *testing.T) {
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromInt(1), f{{.Bits}}d{{.Digits}}.FromInt(3).Mod(f{{.Bits}}d{{.Digits}}.FromInt(2)))
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromStringForced("0.3"), f{{.Bits}}d{{.Digits}}.FromStringForced("9.3").Mod(f{{.Bits}}d{{.Digits}}.FromInt(3)))
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromStringForced("0.1"), f{{.Bits}}d{{.Digits}}.FromStringForced("3.1").Mod(f{{.Bits}}d{{.Digits}}.FromStringForced("0.2")))
}

func TestTrunc(t *testing.T) {
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromInt(0), f{{.Bits}}d{{.Digits}}.FromStringForced("0.3333").Trunc())
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromInt(2), f{{.Bits}}d{{.Digits}}.FromStringForced("2.6789").Trunc())
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromInt(3), f{{.Bits}}d{{.Digits}}.FromInt(3).Trunc())
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromInt(0), f{{.Bits}}d{{.Digits}}.FromStringForced("-0.3333").Trunc())
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromInt(-2), f{{.Bits}}d{{.Digits}}.FromStringForced("-2.6789").Trunc())
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromInt(-3), f{{.Bits}}d{{.Digits}}.FromInt(-3).Trunc())
}

func TestCeil(t *testing.T) {
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromInt(1), f{{.Bits}}d{{.Digits}}.FromStringForced("0.3333").Ceil())
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromInt(3), f{{.Bits}}d{{.Digits}}.FromStringForced("2.6789").Ceil())
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromInt(3), f{{.Bits}}d{{.Digits}}.FromInt(3).Ceil())
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromInt(0), f{{.Bits}}d{{.Digits}}.FromStringForced("-0.3333").Ceil())
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromInt(-2), f{{.Bits}}d{{.Digits}}.FromStringForced("-2.6789").Ceil())
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromInt(-3), f{{.Bits}}d{{.Digits}}.FromInt(-3).Ceil())
}

func TestRound(t *testing.T) {
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromInt(0), f{{.Bits}}d{{.Digits}}.FromStringForced("0.3333").Round())
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromInt(3), f{{.Bits}}d{{.Digits}}.FromStringForced("2.6789").Round())
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromInt(3), f{{.Bits}}d{{.Digits}}.FromInt(3).Round())
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromInt(0), f{{.Bits}}d{{.Digits}}.FromStringForced("-0.3333").Round())
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromInt(-3), f{{.Bits}}d{{.Digits}}.FromStringForced("-2.6789").Round())
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromInt(-3), f{{.Bits}}d{{.Digits}}.FromInt(-3).Round())
}

func TestAbs(t *testing.T) {
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromStringForced("0.3333"), f{{.Bits}}d{{.Digits}}.FromStringForced("0.3333").Abs())
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromStringForced("2.6789"), f{{.Bits}}d{{.Digits}}.FromStringForced("2.6789").Abs())
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromInt(3), f{{.Bits}}d{{.Digits}}.FromInt(3).Abs())
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromStringForced("0.3333"), f{{.Bits}}d{{.Digits}}.FromStringForced("-0.3333").Abs())
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromStringForced("2.6789"), f{{.Bits}}d{{.Digits}}.FromStringForced("-2.6789").Abs())
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromInt(3), f{{.Bits}}d{{.Digits}}.FromInt(-3).Abs())
}

{{if eq .Bits 128}}
func TestNeg(t *testing.T) {
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromStringForced("-0.3333"), f{{.Bits}}d{{.Digits}}.FromStringForced("0.3333").Neg())
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromStringForced("-2.6789"), f{{.Bits}}d{{.Digits}}.FromStringForced("2.6789").Neg())
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromInt(-3), f{{.Bits}}d{{.Digits}}.FromInt(3).Neg())
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromStringForced("0.3333"), f{{.Bits}}d{{.Digits}}.FromStringForced("-0.3333").Neg())
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromStringForced("2.6789"), f{{.Bits}}d{{.Digits}}.FromStringForced("-2.6789").Neg())
	assert.Equal(t, f{{.Bits}}d{{.Digits}}.FromInt(3), f{{.Bits}}d{{.Digits}}.FromInt(-3).Neg())
}

func TestCmp(t *testing.T) {
	assert.Equal(t, 1, f{{.Bits}}d{{.Digits}}.FromStringForced("0.3333").Cmp(f{{.Bits}}d{{.Digits}}.FromInt(-3)))
	assert.Equal(t, -1, f{{.Bits}}d{{.Digits}}.FromStringForced("2.6789").Cmp(f{{.Bits}}d{{.Digits}}.FromInt(3)))
	assert.Equal(t, 0, f{{.Bits}}d{{.Digits}}.FromInt(3).Cmp(f{{.Bits}}d{{.Digits}}.FromInt(3)))
}

func TestEqual(t *testing.T) {
	assert.Equal(t, false, f{{.Bits}}d{{.Digits}}.FromStringForced("0.3333").Equal(f{{.Bits}}d{{.Digits}}.FromInt(-3)))
	assert.Equal(t, false, f{{.Bits}}d{{.Digits}}.FromStringForced("2.6789").Equal(f{{.Bits}}d{{.Digits}}.FromInt(3)))
	assert.Equal(t, true, f{{.Bits}}d{{.Digits}}.FromInt(3).Equal(f{{.Bits}}d{{.Digits}}.FromInt(3)))
}

func TestGreaterThan(t *testing.T) {
	assert.Equal(t, true, f{{.Bits}}d{{.Digits}}.FromStringForced("0.3333").GreaterThan(f{{.Bits}}d{{.Digits}}.FromInt(-3)))
	assert.Equal(t, false, f{{.Bits}}d{{.Digits}}.FromStringForced("2.6789").GreaterThan(f{{.Bits}}d{{.Digits}}.FromInt(3)))
	assert.Equal(t, false, f{{.Bits}}d{{.Digits}}.FromInt(3).GreaterThan(f{{.Bits}}d{{.Digits}}.FromInt(3)))
	assert.Equal(t, true, f{{.Bits}}d{{.Digits}}.FromInt(4).GreaterThan(f{{.Bits}}d{{.Digits}}.FromInt(3)))
	assert.Equal(t, true, f{{.Bits}}d{{.Digits}}.FromStringForced("2.6789").GreaterThan(f{{.Bits}}d{{.Digits}}.FromInt(-1)))
}

func TestGreaterThanOrEqual(t *testing.T) {
	assert.Equal(t, true, f{{.Bits}}d{{.Digits}}.FromStringForced("0.3333").GreaterThanOrEqual(f{{.Bits}}d{{.Digits}}.FromInt(-3)))
	assert.Equal(t, false, f{{.Bits}}d{{.Digits}}.FromStringForced("2.6789").GreaterThanOrEqual(f{{.Bits}}d{{.Digits}}.FromInt(3)))
	assert.Equal(t, true, f{{.Bits}}d{{.Digits}}.FromInt(3).GreaterThanOrEqual(f{{.Bits}}d{{.Digits}}.FromInt(3)))
	assert.Equal(t, true, f{{.Bits}}d{{.Digits}}.FromInt(4).GreaterThanOrEqual(f{{.Bits}}d{{.Digits}}.FromInt(3)))
	assert.Equal(t, true, f{{.Bits}}d{{.Digits}}.FromStringForced("2.6789").GreaterThanOrEqual(f{{.Bits}}d{{.Digits}}.FromInt(-1)))
}

func TestLessThan(t *testing.T) {
	assert.Equal(t, false, f{{.Bits}}d{{.Digits}}.FromStringForced("0.3333").LessThan(f{{.Bits}}d{{.Digits}}.FromInt(-3)))
	assert.Equal(t, true, f{{.Bits}}d{{.Digits}}.FromStringForced("2.6789").LessThan(f{{.Bits}}d{{.Digits}}.FromInt(3)))
	assert.Equal(t, false, f{{.Bits}}d{{.Digits}}.FromInt(3).LessThan(f{{.Bits}}d{{.Digits}}.FromInt(3)))
	assert.Equal(t, false, f{{.Bits}}d{{.Digits}}.FromInt(4).LessThan(f{{.Bits}}d{{.Digits}}.FromInt(3)))
	assert.Equal(t, false, f{{.Bits}}d{{.Digits}}.FromStringForced("2.6789").LessThan(f{{.Bits}}d{{.Digits}}.FromInt(-1)))
}

func TestLessThanOrEqual(t *testing.T) {
	assert.Equal(t, false, f{{.Bits}}d{{.Digits}}.FromStringForced("0.3333").LessThanOrEqual(f{{.Bits}}d{{.Digits}}.FromInt(-3)))
	assert.Equal(t, true, f{{.Bits}}d{{.Digits}}.FromStringForced("2.6789").LessThanOrEqual(f{{.Bits}}d{{.Digits}}.FromInt(3)))
	assert.Equal(t, true, f{{.Bits}}d{{.Digits}}.FromInt(3).LessThanOrEqual(f{{.Bits}}d{{.Digits}}.FromInt(3)))
	assert.Equal(t, false, f{{.Bits}}d{{.Digits}}.FromInt(4).LessThanOrEqual(f{{.Bits}}d{{.Digits}}.FromInt(3)))
	assert.Equal(t, false, f{{.Bits}}d{{.Digits}}.FromStringForced("2.6789").LessThanOrEqual(f{{.Bits}}d{{.Digits}}.FromInt(-1)))
}
{{end}}

func TestJSON(t *testing.T) {
	for i := -25000; i < 25001; i += 13 {
		testJSON(t, f{{.Bits}}d{{.Digits}}.FromInt(i))
	}
	{{- if eq .Bits 64}}
	testJSON(t, f{{.Bits}}d{{.Digits}}.FromInt64(1844674407371259000))
	{{- else}}
	testJSON(t, f{{.Bits}}d{{.Digits}}.FromFloat64(18446744073712590000))
	{{- end}}
}

func testJSON(t *testing.T, v f{{.Bits}}d{{.Digits}}.Int) {
	t.Helper()
	e1 := embedded{Field: v}
	data, err := json.Marshal(&e1)
	assert.NoError(t, err)
	var e2 embedded
	err = json.Unmarshal(data, &e2)
	assert.NoError(t, err)
	require.Equal(t, e1, e2)
}

func TestYAML(t *testing.T) {
	for i := -25000; i < 25001; i += 13 {
		testYAML(t, f{{.Bits}}d{{.Digits}}.FromInt(i))
	}
	{{- if eq .Bits 64}}
	testYAML(t, f{{.Bits}}d{{.Digits}}.FromInt64(1844674407371259000))
	{{- else}}
	testYAML(t, f{{.Bits}}d{{.Digits}}.FromFloat64(18446744073712590000))
	{{- end}}
}

func testYAML(t *testing.T, v f{{.Bits}}d{{.Digits}}.Int) {
	t.Helper()
	e1 := embedded{Field: v}
	data, err := yaml.Marshal(&e1)
	assert.NoError(t, err)
	var e2 embedded
	err = yaml.Unmarshal(data, &e2)
	assert.NoError(t, err)
	require.Equal(t, e1, e2)
}
