// Copyright Â©2016-2022 by Richard A. Wilkes. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, version 2.0. If a copy of the MPL was not distributed with
// this file, You can obtain one at http://mozilla.org/MPL/2.0/.
//
// This Source Code Form is "Incompatible With Secondary Licenses", as
// defined by the Mozilla Public License, version 2.0.

package fixed_test

import (
	"encoding/json"
	"testing"

	"github.com/richardwilkes/toolbox/xmath/fixed"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"gopkg.in/yaml.v3"
)

type embedded{{.Bits}}d{{.Digits}} struct {
	Field fixed.F{{.Bits}}d{{.Digits}}
}

func TestConversion{{.Bits}}d{{.Digits}}(t *testing.T) {
	assert.Equal(t, "0.1", fixed.F{{.Bits}}d{{.Digits}}FromFloat64(0.1).String())
	assert.Equal(t, "0.2", fixed.F{{.Bits}}d{{.Digits}}FromFloat64(0.2).String())
	assert.Equal(t, "0.3", fixed.F{{.Bits}}d{{.Digits}}FromStringForced("0.3").String())
	assert.Equal(t, "-0.1", fixed.F{{.Bits}}d{{.Digits}}FromFloat64(-0.1).String())
	assert.Equal(t, "-0.2", fixed.F{{.Bits}}d{{.Digits}}FromFloat64(-0.2).String())
	assert.Equal(t, "-0.3", fixed.F{{.Bits}}d{{.Digits}}FromStringForced("-0.3").String())
	assert.Equal(t, "0.{{repeat "3" .Digits}}", fixed.F{{.Bits}}d{{.Digits}}FromStringForced("0.{{repeat "3" (add .Digits 2)}}").String())
	assert.Equal(t, "-0.{{repeat "3" .Digits}}", fixed.F{{.Bits}}d{{.Digits}}FromStringForced("-0.{{repeat "3" (add .Digits 2)}}").String())
	assert.Equal(t, "0.{{repeat "6" .Digits}}", fixed.F{{.Bits}}d{{.Digits}}FromStringForced("0.{{repeat "6" (add .Digits 2)}}").String())
	assert.Equal(t, "-0.{{repeat "6" .Digits}}", fixed.F{{.Bits}}d{{.Digits}}FromStringForced("-0.{{repeat "6" (add .Digits 2)}}").String())
	assert.Equal(t, "1", fixed.F{{.Bits}}d{{.Digits}}FromFloat64(1.{{repeat "0" .Digits}}4).String())
	assert.Equal(t, "1", fixed.F{{.Bits}}d{{.Digits}}FromFloat64(1.{{repeat "0" .Digits}}49).String())
	assert.Equal(t, "1", fixed.F{{.Bits}}d{{.Digits}}FromFloat64(1.{{repeat "0" .Digits}}5).String())
	assert.Equal(t, "1", fixed.F{{.Bits}}d{{.Digits}}FromFloat64(1.{{repeat "0" .Digits}}9).String())
	assert.Equal(t, "-1", fixed.F{{.Bits}}d{{.Digits}}FromFloat64(-1.{{repeat "0" .Digits}}4).String())
	assert.Equal(t, "-1", fixed.F{{.Bits}}d{{.Digits}}FromFloat64(-1.{{repeat "0" .Digits}}49).String())
	assert.Equal(t, "-1", fixed.F{{.Bits}}d{{.Digits}}FromFloat64(-1.{{repeat "0" .Digits}}5).String())
	assert.Equal(t, "-1", fixed.F{{.Bits}}d{{.Digits}}FromFloat64(-1.{{repeat "0" .Digits}}9).String())
	assert.Equal(t, "0.{{repeat "0" (sub .Digits 1)}}4", fixed.F{{.Bits}}d{{.Digits}}FromStringForced("0.{{repeat "0" (sub .Digits 1)}}405").String())
	assert.Equal(t, "-0.{{repeat "0" (sub .Digits 1)}}4", fixed.F{{.Bits}}d{{.Digits}}FromStringForced("-0.{{repeat "0" (sub .Digits 1)}}405").String())

	v, err := fixed.F{{.Bits}}d{{.Digits}}FromString("33.0")
	assert.NoError(t, err)
	assert.Equal(t, v, fixed.F{{.Bits}}d{{.Digits}}FromInt64(33))

	v, err = fixed.F{{.Bits}}d{{.Digits}}FromString("33.00000000000000000000")
	assert.NoError(t, err)
	assert.Equal(t, v, fixed.F{{.Bits}}d{{.Digits}}FromInt64(33))
}

func TestAddSub{{.Bits}}d{{.Digits}}(t *testing.T) {
	oneThird := fixed.F{{.Bits}}d{{.Digits}}FromStringForced("0.{{repeat "3" .Digits}}")
	negTwoThirds := fixed.F{{.Bits}}d{{.Digits}}FromStringForced("-0.{{repeat "6" .Digits}}")
	one := fixed.F{{.Bits}}d{{.Digits}}FromInt64(1)
	oneAndTwoThirds := fixed.F{{.Bits}}d{{.Digits}}FromStringForced("1.{{repeat "6" .Digits}}")
	nineThousandSix := fixed.F{{.Bits}}d{{.Digits}}FromInt64(9006)
	ninetyPointZeroSix := fixed.F{{.Bits}}d{{.Digits}}FromStringForced("90.06")
	twelvePointThirtyFour := fixed.F{{.Bits}}d{{.Digits}}FromStringForced("12.34")
	two := fixed.F{{.Bits}}d{{.Digits}}FromInt64(2)
	assert.Equal(t, "0.{{repeat "9" .Digits}}", (oneThird{{if eq .Bits 64}} + oneThird + oneThird{{else}}.Add(oneThird).Add(oneThird){{end}}).String())
	assert.Equal(t, "0.{{repeat "6" (sub .Digits 1)}}7", (one{{if eq .Bits 64}} - oneThird{{else}}.Sub(oneThird){{end}}).String())
	assert.Equal(t, "-1.{{repeat "6" .Digits}}", (negTwoThirds{{if eq .Bits 64}} - one{{else}}.Sub(one){{end}}).String())
	assert.Equal(t, "0", (negTwoThirds{{if eq .Bits 64}} - one + oneAndTwoThirds{{else}}.Sub(one).Add(oneAndTwoThirds){{end}}).String())
	assert.Equal(t, fixed.F{{.Bits}}d{{.Digits}}FromInt64(10240), fixed.F{{.Bits}}d{{.Digits}}FromInt64(1234){{if eq .Bits 64}}+nineThousandSix{{else}}.Add(nineThousandSix){{end}})
	assert.Equal(t, "10240", (fixed.F{{.Bits}}d{{.Digits}}FromInt64(1234){{if eq .Bits 64}} + nineThousandSix{{else}}.Add(nineThousandSix){{end}}).String())
	assert.Equal(t, fixed.F{{.Bits}}d{{.Digits}}FromStringForced("102.4"), twelvePointThirtyFour{{if eq .Bits 64}}+ninetyPointZeroSix{{else}}.Add(ninetyPointZeroSix){{end}})
	assert.Equal(t, "102.4", (twelvePointThirtyFour{{if eq .Bits 64}} + ninetyPointZeroSix{{else}}.Add(ninetyPointZeroSix){{end}}).String())
	assert.Equal(t, "-1.5", (fixed.F{{.Bits}}d{{.Digits}}FromFloat64(0.5){{if eq .Bits 64}} - two{{else}}.Sub(two){{end}}).String())
}

func TestMulDiv{{.Bits}}d{{.Digits}}(t *testing.T) {
	pointThree := fixed.F{{.Bits}}d{{.Digits}}FromStringForced("0.3")
	negativePointThree := fixed.F{{.Bits}}d{{.Digits}}FromStringForced("-0.3")
	assert.Equal(t, "0.{{repeat "3" .Digits}}", fixed.F{{.Bits}}d{{.Digits}}FromInt64(1).Div(fixed.F{{.Bits}}d{{.Digits}}FromInt64(3)).String())
	assert.Equal(t, "-0.{{repeat "3" .Digits}}", fixed.F{{.Bits}}d{{.Digits}}FromInt64(1).Div(fixed.F{{.Bits}}d{{.Digits}}FromInt64(-3)).String())
	assert.Equal(t, "0.1", pointThree.Div(fixed.F{{.Bits}}d{{.Digits}}FromInt64(3)).String())
	assert.Equal(t, "0.9", pointThree.Mul(fixed.F{{.Bits}}d{{.Digits}}FromInt64(3)).String())
	assert.Equal(t, "-0.9", negativePointThree.Mul(fixed.F{{.Bits}}d{{.Digits}}FromInt64(3)).String())
}

func TestTrunc{{.Bits}}d{{.Digits}}(t *testing.T) {
	assert.Equal(t, fixed.F{{.Bits}}d{{.Digits}}FromInt64(0), fixed.F{{.Bits}}d{{.Digits}}FromStringForced("0.3333").Trunc())
	assert.Equal(t, fixed.F{{.Bits}}d{{.Digits}}FromInt64(2), fixed.F{{.Bits}}d{{.Digits}}FromStringForced("2.6789").Trunc())
	assert.Equal(t, fixed.F{{.Bits}}d{{.Digits}}FromInt64(3), fixed.F{{.Bits}}d{{.Digits}}FromInt64(3).Trunc())
	assert.Equal(t, fixed.F{{.Bits}}d{{.Digits}}FromInt64(0), fixed.F{{.Bits}}d{{.Digits}}FromStringForced("-0.3333").Trunc())
	assert.Equal(t, fixed.F{{.Bits}}d{{.Digits}}FromInt64(-2), fixed.F{{.Bits}}d{{.Digits}}FromStringForced("-2.6789").Trunc())
	assert.Equal(t, fixed.F{{.Bits}}d{{.Digits}}FromInt64(-3), fixed.F{{.Bits}}d{{.Digits}}FromInt64(-3).Trunc())
}

func TestJSON{{.Bits}}d{{.Digits}}(t *testing.T) {
	for i := int64(-25000); i < 25001; i += 13 {
		testJSON{{.Bits}}d{{.Digits}}(t, fixed.F{{.Bits}}d{{.Digits}}FromInt64(i))
	}
	{{- if eq .Bits 64}}
	testJSON{{.Bits}}d{{.Digits}}(t, fixed.F{{.Bits}}d{{.Digits}}FromInt64(1844674407371259000))
	{{- else}}
	testJSON{{.Bits}}d{{.Digits}}(t, fixed.F{{.Bits}}d{{.Digits}}FromFloat64(18446744073712590000))
	{{- end}}
}

func testJSON{{.Bits}}d{{.Digits}}(t *testing.T, v fixed.F{{.Bits}}d{{.Digits}}) {
	t.Helper()
	e1 := embedded{{.Bits}}d{{.Digits}}{Field: v}
	data, err := json.Marshal(&e1)
	assert.NoError(t, err)
	var e2 embedded{{.Bits}}d{{.Digits}}
	err = json.Unmarshal(data, &e2)
	assert.NoError(t, err)
	require.Equal(t, e1, e2)
}

func TestYAML{{.Bits}}d{{.Digits}}(t *testing.T) {
	for i := int64(-25000); i < 25001; i += 13 {
		testYAML{{.Bits}}d{{.Digits}}(t, fixed.F{{.Bits}}d{{.Digits}}FromInt64(i))
	}
	{{- if eq .Bits 64}}
	testYAML{{.Bits}}d{{.Digits}}(t, fixed.F{{.Bits}}d{{.Digits}}FromInt64(1844674407371259000))
	{{- else}}
	testYAML{{.Bits}}d{{.Digits}}(t, fixed.F{{.Bits}}d{{.Digits}}FromFloat64(18446744073712590000))
	{{- end}}
}

func testYAML{{.Bits}}d{{.Digits}}(t *testing.T, v fixed.F{{.Bits}}d{{.Digits}}) {
	t.Helper()
	e1 := embedded{{.Bits}}d{{.Digits}}{Field: v}
	data, err := yaml.Marshal(&e1)
	assert.NoError(t, err)
	var e2 embedded{{.Bits}}d{{.Digits}}
	err = yaml.Unmarshal(data, &e2)
	assert.NoError(t, err)
	require.Equal(t, e1, e2)
}
